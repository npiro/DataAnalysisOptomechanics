function [fitresult, gof, out] = SquashingModelFit(Freq, Amp, StartPoint, GammaM, fi)
%CREATEFIT(BARELWFREQ,BARELWAMP)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : BareLWFreq
%      Y Output: BareLWAmp
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 08-Apr-2014 11:27:45


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( Freq, Amp );

% Set up fittype and options.

ft = fittype( 'log((SxxMax*(OmegaM*GammaM)^2+SxxNoise*((OmegaM.^2 - Omega.^2).^2+(Omega*GammaM).^2))./((OmegaM^2-Omega.^2-g*Omega*GammaM*sin(fi)).^2+(Omega*GammaM*(1+g*cos(fi))).^2))', 'coefficients', {'g','SxxMax','SxxNoise','OmegaM'},'independent', 'Omega', 'dependent', 'y','problem',{'GammaM','fi'} );
opts = fitoptions( ft);
opts.Display = 'Off';
opts.Maxiter = 600;
opts.Robust = 'LAR';
%opts.Algorithm = 'Levenberg-Marquardt';
opts.TolFun = 1e-8;
opts.TolX = 1e-8;
opts.DiffMinChange = 1e-7;
opts.DiffMaxChange = 0.05;
opts.MaxFunEvals = 600;
opts.Lower = [0 0 0 0];
% Calculate smoothing factor according to the relative noise of the signal

opts.StartPoint = StartPoint;
opts.Upper = [Inf Inf Inf Inf];


% Fit model to data.
[fitresult, gof, out] = fit( xData, log(yData), ft, opts, 'problem', {GammaM,fi} );

% Plot fit with data.
%figure( 'Name', 'untitled fit 1' );
%yFitData = exp(fitresult(xData));
%h = plot(xData, yFitData, xData, yData );
%legend( h, 'BareLWAmp vs. BareLWFreq', 'untitled fit 1', 'Location', 'NorthEast' );
% Label axes
%xlabel( 'Frequency (Hz)' );
%%ylabel( 'Amplitude' );
%set(gca,'YScale','log');
%grid on


